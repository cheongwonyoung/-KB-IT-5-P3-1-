{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport apiClient from \"@/axios\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  },\n  methods: {\n    login() {\n      if (this.email === \"\" || this.password === \"\") {\n        return;\n      }\n      apiClient.post(\"/auth/login\", {\n        email: this.email,\n        password: this.password\n      }).then(res => {\n        if (res.status != 200) {\n          console.log(\"Server Error\");\n          return;\n        }\n        const authHeader = res.headers[\"authorization\"];\n        console.log(authHeader);\n        if (authHeader && authHeader.startsWith(\"Bearer \")) {\n          const token = authHeader.substring(7); // 'Bearer ' 이후의 문자열을 추출\n          console.log(\"JWT Token:\", token);\n          localStorage.setItem(\"JwtToken\", token);\n          this.$router.push(\"/\");\n        } else {\n          console.error(\"Authorization 헤더가 존재하지 않거나 잘못된 형식입니다.\");\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["apiClient","data","email","password","methods","login","post","then","res","status","console","log","authHeader","headers","startsWith","token","substring","localStorage","setItem","$router","push","error","catch"],"sources":["/Users/gimeus/Desktop/Crunch-It/Crunch-It/Development/FE/muno-muno/src/pages/LoginPage.vue"],"sourcesContent":["<template lang=\"\">\n    <div class=\"container\">\n        <input type=\"email\" id=\"id-input\" placeholder=\"이메일 입력\" v-model=\"email\" />\n        <input type=\"password\" id=\"password-input\" placeholder=\"비밀번호 입력\" v-model=\"password\" />\n\n        <button class=\"button\" @click=\"login\">로그인</button>\n\n        <div class=\"link-container\">\n            <a href=\"#\">아이디 / 비밀번호 찾기</a>\n            <span>|</span>\n            <a href=\"#\">회원가입</a>\n        </div>\n        <div class=\"sns-login-container\">\n            <div class=\"separator\"></div>\n            <span class=\"sns-login\">SNS 계정으로 로그인</span>\n            <div class=\"separator\"></div>\n        </div>\n        <div class=\"social-login-container\">\n            <img class=\"login-img\" src=\"@/assets/kakao.svg\" />\n            <img class=\"login-img\" src=\"@/assets/naver.svg\" />\n            <img class=\"login-img\" src=\"@/assets/apple.svg\" />\n        </div>\n    </div>\n</template>\n<script>\n    import apiClient from \"@/axios\";\n    export default {\n        data() {\n            return {\n                email: \"\",\n                password: \"\",\n            };\n        },\n        methods: {\n            login() {\n                if (this.email === \"\" || this.password === \"\") {\n                    return;\n                }\n                apiClient\n                    .post(\"/auth/login\", {\n                        email: this.email,\n                        password: this.password,\n                    })\n                    .then((res) => {\n                        if (res.status != 200) {\n                            console.log(\"Server Error\");\n                            return;\n                        }\n                        const authHeader = res.headers[\"authorization\"];\n                        console.log(authHeader);\n                        if (authHeader && authHeader.startsWith(\"Bearer \")) {\n                            const token = authHeader.substring(7); // 'Bearer ' 이후의 문자열을 추출\n                            console.log(\"JWT Token:\", token);\n                            localStorage.setItem(\"JwtToken\", token);\n                            this.$router.push(\"/\");\n                        } else {\n                            console.error(\"Authorization 헤더가 존재하지 않거나 잘못된 형식입니다.\");\n                        }\n                    })\n                    .catch((error) => {\n                        console.log(error);\n                    });\n            },\n        },\n    };\n</script>\n<style>\n    /* 공통 설정 */\n    /* 공통 설정 */\n    /* 전체 컨테이너 */\n    .container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 100vh;\n        box-sizing: border-box;\n    }\n\n    /* Input fields */\n    input {\n        width: 335px;\n        height: 56px;\n        box-sizing: border-box;\n        background: #ffffff;\n        border: 0.5px solid #d6dae0;\n        border-radius: 12px;\n        padding: 0 0 0 16px; /* 텍스트 입력 시 패딩 추가 */\n        font-family: \"Pretendard\", sans-serif;\n        font-size: 16px;\n        color: #000000; /* 입력 텍스트 색상 */\n        margin-bottom: 12px; /* 입력 필드 간 간격 추가 */\n    }\n\n    /* Placeholder 스타일 */\n    ::placeholder {\n        color: #d6dae0; /* Placeholder 색상 */\n        font-weight: 500;\n        font-size: 16px;\n    }\n\n    /* Button */\n    .button {\n        width: 335px;\n        height: 56px;\n        background: #3e8aff;\n        border-radius: 12px;\n        border: none; /* 버튼 기본 테두리 제거 */\n        cursor: pointer; /* 마우스를 올렸을 때 포인터 모양 변경 */\n        font-family: \"Pretendard\", sans-serif;\n        font-style: normal;\n        font-weight: 600;\n        font-size: 16px;\n        color: #ffffff;\n        display: flex;\n        justify-content: center; /* 수평 중앙 정렬 */\n        align-items: center; /* 수직 중앙 정렬 */\n        text-align: center;\n        margin-bottom: 20px; /* 버튼 아래 간격 추가 */\n    }\n\n    /* 아이디 / 비밀번호 찾기 | 회원가입 */\n    .link-container {\n        display: flex;\n        justify-content: space-between; /* 각 링크 사이에 공간 배분 */\n        width: 209px;\n        font-family: \"Pretendard\", sans-serif;\n        font-style: normal;\n        font-weight: 500;\n        font-size: 13px;\n        color: #8892a0;\n        margin-bottom: 130px; /* 링크 아래 간격 추가 */\n    }\n\n    /* 링크 스타일 */\n    .link-container a {\n        text-decoration: none; /* 밑줄 제거 */\n        color: #8892a0; /* 링크 색상 */\n    }\n\n    .link-container a:hover {\n        color: #3e8aff; /* 마우스를 올렸을 때 링크 색상 */\n    }\n\n    /* 소셜 로그인 아이콘 컨테이너 */\n    .social-login-container {\n        display: flex;\n        justify-content: space-around; /* 각 아이콘 사이에 간격 추가 */\n        width: 210px;\n    }\n\n    .sns-login {\n        font-family: \"Pretendard\", sans-serif;\n        font-style: normal;\n        font-weight: 500;\n        font-size: 12px;\n        text-align: center;\n\n        color: #8892a0;\n    }\n\n    .login-img {\n        width: 50px;\n        height: 50px;\n        border-radius: 50%;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin: 20 10px;\n    }\n    .sns-login-container {\n        display: flex;\n        align-items: center; /* 수직 중앙 정렬 */\n        width: 100%; /* 전체 너비 사용 */\n        margin-bottom: 20px; /* 아래 간격 추가 */\n    }\n\n    /* 구분선 */\n    .separator {\n        flex: 1; /* 남은 공간을 차지하도록 설정 */\n        height: 1px; /* 구분선 두께 */\n        background-color: #d6dae0; /* 구분선 색상 */\n        margin: 0 10px; /* 구분선과 텍스트 사이의 간격 */\n    }\n</style>\n"],"mappings":";AAyBI,OAAOA,SAAQ,MAAO,SAAS;AAC/B,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACd,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,KAAKA,CAAA,EAAG;MACJ,IAAI,IAAI,CAACH,KAAI,KAAM,EAAC,IAAK,IAAI,CAACC,QAAO,KAAM,EAAE,EAAE;QAC3C;MACJ;MACAH,SAAQ,CACHM,IAAI,CAAC,aAAa,EAAE;QACjBJ,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,QAAQ,EAAE,IAAI,CAACA;MACnB,CAAC,EACAI,IAAI,CAAEC,GAAG,IAAK;QACX,IAAIA,GAAG,CAACC,MAAK,IAAK,GAAG,EAAE;UACnBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3B;QACJ;QACA,MAAMC,UAAS,GAAIJ,GAAG,CAACK,OAAO,CAAC,eAAe,CAAC;QAC/CH,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;QACvB,IAAIA,UAAS,IAAKA,UAAU,CAACE,UAAU,CAAC,SAAS,CAAC,EAAE;UAChD,MAAMC,KAAI,GAAIH,UAAU,CAACI,SAAS,CAAC,CAAC,CAAC,EAAE;UACvCN,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,KAAK,CAAC;UAChCE,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,KAAK,CAAC;UACvC,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;QAC1B,OAAO;UACHV,OAAO,CAACW,KAAK,CAAC,uCAAuC,CAAC;QAC1D;MACJ,CAAC,EACAC,KAAK,CAAED,KAAK,IAAK;QACdX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;MACtB,CAAC,CAAC;IACV;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}